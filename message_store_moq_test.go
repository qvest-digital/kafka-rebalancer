// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package rebalance

import (
	"github.com/segmentio/kafka-go"
	"sync"
)

var (
	lockmessageStoreMockAddMessages sync.RWMutex
	lockmessageStoreMockMessages    sync.RWMutex
)

// Ensure, that messageStoreMock does implement messageStore.
// If this is not the case, regenerate this file with moq.
var _ messageStore = &messageStoreMock{}

// messageStoreMock is a mock implementation of messageStore.
//
//     func TestSomethingThatUsesmessageStore(t *testing.T) {
//
//         // make and configure a mocked messageStore
//         mockedmessageStore := &messageStoreMock{
//             AddMessagesFunc: func(msg ...kafka.Message)  {
// 	               panic("mock out the AddMessages method")
//             },
//             MessagesFunc: func() []kafka.Message {
// 	               panic("mock out the Messages method")
//             },
//         }
//
//         // use mockedmessageStore in code that requires messageStore
//         // and then make assertions.
//
//     }
type messageStoreMock struct {
	// AddMessagesFunc mocks the AddMessages method.
	AddMessagesFunc func(msg ...kafka.Message)

	// MessagesFunc mocks the Messages method.
	MessagesFunc func() []kafka.Message

	// calls tracks calls to the methods.
	calls struct {
		// AddMessages holds details about calls to the AddMessages method.
		AddMessages []struct {
			// Msg is the msg argument value.
			Msg []kafka.Message
		}
		// Messages holds details about calls to the Messages method.
		Messages []struct {
		}
	}
}

// AddMessages calls AddMessagesFunc.
func (mock *messageStoreMock) AddMessages(msg ...kafka.Message) {
	if mock.AddMessagesFunc == nil {
		panic("messageStoreMock.AddMessagesFunc: method is nil but messageStore.AddMessages was just called")
	}
	callInfo := struct {
		Msg []kafka.Message
	}{
		Msg: msg,
	}
	lockmessageStoreMockAddMessages.Lock()
	mock.calls.AddMessages = append(mock.calls.AddMessages, callInfo)
	lockmessageStoreMockAddMessages.Unlock()
	mock.AddMessagesFunc(msg...)
}

// AddMessagesCalls gets all the calls that were made to AddMessages.
// Check the length with:
//     len(mockedmessageStore.AddMessagesCalls())
func (mock *messageStoreMock) AddMessagesCalls() []struct {
	Msg []kafka.Message
} {
	var calls []struct {
		Msg []kafka.Message
	}
	lockmessageStoreMockAddMessages.RLock()
	calls = mock.calls.AddMessages
	lockmessageStoreMockAddMessages.RUnlock()
	return calls
}

// Messages calls MessagesFunc.
func (mock *messageStoreMock) Messages() []kafka.Message {
	if mock.MessagesFunc == nil {
		panic("messageStoreMock.MessagesFunc: method is nil but messageStore.Messages was just called")
	}
	callInfo := struct {
	}{}
	lockmessageStoreMockMessages.Lock()
	mock.calls.Messages = append(mock.calls.Messages, callInfo)
	lockmessageStoreMockMessages.Unlock()
	return mock.MessagesFunc()
}

// MessagesCalls gets all the calls that were made to Messages.
// Check the length with:
//     len(mockedmessageStore.MessagesCalls())
func (mock *messageStoreMock) MessagesCalls() []struct {
} {
	var calls []struct {
	}
	lockmessageStoreMockMessages.RLock()
	calls = mock.calls.Messages
	lockmessageStoreMockMessages.RUnlock()
	return calls
}
